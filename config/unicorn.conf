Dir.chdir File.expand_path("../../", __FILE__)

worker_processes 2

preload_app true

listen "/tmp/unicorn.sock", :backlog => 2048

pid_path = "tmp/pids/unicorn.pid"
pid pid_path

stderr_path "log/unicorn-err.log"
stdout_path "log/unicorn-out.log"

# before_fork is invoked when master creates its workers.
# If preload_app is true, master is ready to get HTTP a request.
# If master is newly created, the new master should kill the old master by QUIT signal.
before_fork do |server, worker|
  pools       = ActiveRecord::Base.connection_handler.connection_pools
  connections = pools.map {|name, pool| pool.connections }.flatten
  connections.each(&:disconnect!)

  old_pid_path = "#{pid_path}.oldbin"
  if File.exists?(old_pid_path) && server.pid != old_pid_path
    begin
      Process.kill("QUIT", File.read(old_pid_path).to_i)
    rescue Errno::ENOENT, Errno::ESRCH
    end
  end
end

after_fork do |server, worker|
  pools       = ActiveRecord::Base.connection_handler.connection_pools
  connections = pools.map {|name, pool| pool.connections }.flatten
  connections.each(&:reconnect!)

  begin
    uid        = Process.euid
    gid        = Process.egid
    user       = ENV["WORKER_USER"]  || "git"
    group      = ENV["WORKER_GROUP"] || "git"
    target_uid = Etc.getpwnam(user).uid
    target_gid = Etc.getgrnam(group).gid
    worker.tmp.chown(target_uid, target_gid)
    if uid != target_uid || gid != target_gid
      Process.initgroups(user, target_gid)
      Process::GID.change_privilege(target_gid)
      Process::UID.change_privilege(target_uid)
    end
  rescue => e
    if Rails.env.development?
      STDERR.puts "#{e.message}\n"
    else
      raise
    end
  end
end
